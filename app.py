import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from eda import perform_eda
from clustering import apply_clustering
from anomaly_detection import detect_anomalies

# Configurer la page
st.set_page_config(
    page_title="Credit Card Anomaly Detection Dashboard",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Appliquer le CSS personnalis√©
st.markdown("""
    <style>
        /* Change background color for the main container */
        .block-container {
            background-color: #c0c0c0;
            color: black;
        }

        /* Style for the sidebar */
        /* Targeting the sidebar by using the class '.sidebar' */
        .sidebar .sidebar-content {
            background-color: #003366;  /* Blue background */
            color: white;
        }

        /* Change the color of the page title */
        .css-1v3fvcr {
            color: #333;
        }

        /* Optionally, you can also change the font style */
        body {
            font-family: Arial, sans-serif;
        }

        /* Customize the sidebar menu items */
        .css-1pdp22n {
            color: white;
        }

        /* Customize the sidebar header */
        .css-1y2d8yy {
            color: white;
        }
    </style>
""", unsafe_allow_html=True)

# Barre lat√©rale de navigation
st.sidebar.title("üåê Navigation")
options = {
    "Home": "üè†",  # Emoji for Home
    "EDA": "üìä",  # Emoji for EDA (chart)
    "Clustering": "üîç ",  # Emoji for Clustering (tools)
    "Anomaly Detection": "‚ö†Ô∏è",  # Emoji for Anomaly Detection (warning)
}

# Sidebar navigation
choice = st.sidebar.radio(
    "Go to", 
    options.keys(), 
    format_func=lambda x: f"{options[x]} {x}",  # Add emoji to the option text
)

# Tableau de bord principal
if choice == "Home":
    st.title("Tableau de bord de d√©tection d'anomalies sur les cartes de cr√©dit üí≥ ")
    st.write(
        """
        Bienvenue sur le tableau de bord de d√©tection d'anomalies pour les transactions de cartes de cr√©dit.  
        Cette application a pour objectif de fournir une solution puissante et intuitive pour d√©tecter les comportements inhabituels ou frauduleux dans les transactions des cartes de cr√©dit. Voici les principales fonctionnalit√©s offertes par l'application :
        
        1. **Analyse exploratoire des donn√©es (EDA)** : 
            Vous pouvez explorer en profondeur les jeux de donn√©es relatifs aux transactions de cartes de cr√©dit, comprendre leurs structures et identifier des tendances ou des anomalies potentielles. Cela vous aide √† mieux comprendre les donn√©es avant d'appliquer des mod√®les d'analyse.
        
        2. **Techniques de clustering** : 
            Nous appliquons des algorithmes de clustering tels que le K-means ou DBSCAN pour regrouper les transactions similaires. Ces m√©thodes permettent d'identifier des groupes de comportements similaires, ce qui est essentiel pour rep√©rer des anomalies dans les transactions de cartes de cr√©dit.
        
        3. **D√©tection des anomalies** :
            En utilisant des techniques d'apprentissage automatique, cette application d√©tecte automatiquement les transactions suspectes ou anormales. Les anomalies sont signal√©es pour √™tre examin√©es plus en d√©tail, afin de minimiser les risques de fraude.
        
        4. **D√©tection en temps r√©el** :
            Notre solution offre √©galement une fonction de d√©tection en temps r√©el des anomalies dans les transactions de cartes de cr√©dit. Cela permet de pr√©venir les fraudes ou d'identifier rapidement des comportements inhabituels d√®s qu'ils se produisent.
        
        En r√©sum√©, cette application vise √† fournir une analyse compl√®te des transactions de cartes de cr√©dit et √† d√©tecter de mani√®re proactive les fraudes potentielles en utilisant des approches statistiques et d'apprentissage automatique avanc√©es.
        """
    )

elif choice == "EDA":
    st.header("Analyse Exploratoire des Donn√©es (EDA)")
    st.write("""
        Cette page est d√©di√©e √† l'**analyse exploratoire des donn√©es (EDA)**. L'EDA permet de comprendre la structure et les caract√©ristiques d'un jeu de donn√©es avant d'appliquer des mod√®les d'apprentissage automatique.
        
        Vous pouvez t√©l√©charger votre fichier de donn√©es (au format CSV) pour visualiser les principales statistiques descriptives, les tendances et les anomalies dans les donn√©es.  
        L'EDA inclut la v√©rification des valeurs manquantes, la distribution des variables, ainsi que l'identification des relations possibles entre les diff√©rentes colonnes.
        
        Cette √©tape est cruciale pour mieux comprendre les donn√©es et d√©cider des prochaines √©tapes dans le processus de d√©tection des anomalies.
    """)
    uploaded_file = st.file_uploader("Choisissez un fichier CSV", type="csv")
    if uploaded_file:
        data = pd.read_csv(uploaded_file)
        st.write("Aper√ßu des donn√©es:", data.head())
        perform_eda(data)

elif choice == "Clustering":
    st.header("Analyse de Clustering")
    st.write("""
        Cette page vous permet d'appliquer des techniques de **clustering** pour identifier des groupes de donn√©es similaires dans votre jeu de donn√©es.  
        Le clustering est une m√©thode d'apprentissage non supervis√©e utilis√©e pour regrouper des √©l√©ments en fonction de leurs caract√©ristiques similaires.  
        L'objectif ici est de d√©tecter des anomalies en trouvant des comportements ou des motifs qui diff√®rent des groupes principaux.  
        Par exemple, dans le cadre des transactions de cartes de cr√©dit, le clustering peut vous aider √† rep√©rer des comportements suspects ou inhabituels qui m√©ritent une attention particuli√®re.
    """)
    uploaded_file = st.file_uploader("Choisissez un fichier CSV", type="csv")
    if uploaded_file:
        data = pd.read_csv(uploaded_file)
        apply_clustering(data)

elif choice == "Anomaly Detection":
    st.header("D√©tection des Anomalies en Temps R√©el")
    st.write("""
        Cette page est d√©di√©e √† la **d√©tection des anomalies en temps r√©el** dans les transactions de cartes de cr√©dit. L'objectif est d'identifier les comportements suspects ou anormaux dans les transactions, afin de pr√©venir les fraudes.
        
        Vous pouvez t√©l√©charger un fichier de transactions (au format CSV) et appliquer des algorithmes de d√©tection des anomalies pour rep√©rer les transactions potentiellement frauduleuses.
        
        Gr√¢ce √† l'algorithme, nous d√©tectons les points de donn√©es qui s'√©cartent significativement du comportement habituel, indiquant ainsi des anomalies. Cette approche permet d'assurer la s√©curit√© et la fiabilit√© des transactions en temps r√©el.
    """)
    uploaded_file = st.file_uploader("Choisissez un fichier CSV", type="csv")
    if uploaded_file:
        data = pd.read_csv(uploaded_file)
        detect_anomalies(data)
